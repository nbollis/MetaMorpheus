using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EngineLayer;
using MassSpectrometry;
using MzLibUtil;
using Nett;
using NUnit.Framework;
using Omics.Modifications;
using Readers;
using TaskLayer;
using Transcriptomics.Digestion;
using UsefulProteomicsDatabases;

namespace Test.Transcriptomics
{
    [ExcludeFromCodeCoverage]
    internal class TestRnaSearchTask
    {
        [Test]
        public static void TestRnaSearchTask_TwoSpectraFile()
        {
            string dataFile = Path.Combine(TestContext.CurrentContext.TestDirectory, @"Transcriptomics\TestData", "GUACUG_NegativeMode_Sliced.mzML");
            string databasePath = Path.Combine(TestContext.CurrentContext.TestDirectory, @"Transcriptomics\TestData", "6mer.fasta");
            string modFile = Path.Combine(GlobalVariables.DataDir, "Mods", "RnaMods.txt");
            var allMods = PtmListLoader.ReadModsFromFile(modFile, out var errorMods)
                .ToDictionary(p => p.IdWithMotif, p => p);


            string outputFolder = Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestRnaSearchTask");

            CommonParameters commonParams = new
            (
                dissociationType: DissociationType.CID,
                deconvolutionMaxAssumedChargeState: -20,
                deconvolutionIntensityRatio: 3,
                deconvolutionMassTolerance: new PpmTolerance(20),
                precursorMassTolerance: new PpmTolerance(10),
                productMassTolerance: new PpmTolerance(20),
                scoreCutoff: 5,
                totalPartitions: 1,
                maxThreadsToUsePerFile: 1,
                doPrecursorDeconvolution: true,
                useProvidedPrecursorInfo: false,
                digestionParams: new RnaDigestionParams(),
                listOfModsVariable: new List<(string, string)>(),
                listOfModsFixed: new List<(string, string)>()
            );
            RnaSearchParameters searchParams = new()
            {
                DisposeOfFileWhenDone = true,
                MassDiffAcceptorType = MassDiffAcceptorType.Custom,
                CustomMdac = "Custom interval [-5,5]",
                DecoyType = DecoyType.Reverse
            };

            var searchTask = new RnaSearchTask
            {
                CommonParameters = commonParams,
                SearchParameters = searchParams
            };
            var dbForTask = new List<DbForTask> { new(databasePath, false) };
            var taskList = new List<(string, MetaMorpheusTask)> { ("Task1-RnaSearch", searchTask) };
            var runner = new EverythingRunnerEngine(taskList, new List<string> { dataFile }, dbForTask, outputFolder);
            runner.Run();

            // check output files
            Assert.That(Directory.Exists(outputFolder));

            // task settings
            var taskSettingsDir = Path.Combine(outputFolder, "Task Settings");
            Assert.That(Directory.Exists(taskSettingsDir));
            var taskSettingsFile = Path.Combine(taskSettingsDir, "Task1-RnaSearchconfig.toml");
            Assert.That(File.Exists(taskSettingsFile));
            var loadedTask = Toml.ReadFile<RnaSearchTask>(taskSettingsFile, MetaMorpheusTask.tomlConfig);

            // search results
            var resultDir = Path.Combine(outputFolder, "Task1-RnaSearch");
            Assert.That(Directory.Exists(resultDir));
            var resultFile = Path.Combine(resultDir, "AllOSMs.osmtsv");
            var resultTxtFile = Path.Combine(resultDir, "results.txt");
            var proseFile = Path.Combine(resultDir, "AutoGeneratedManuscriptProse.txt");
            Assert.That(File.Exists(resultFile));
            Assert.That(File.Exists(resultTxtFile));
            Assert.That(File.Exists(proseFile));

            Directory.Delete(outputFolder, true);
        }

        [Test]
        public static void TESTNAME()
        {
            string dataFile = Path.Combine(TestContext.CurrentContext.TestDirectory, @"Transcriptomics\TestData", "GUACUG_NegativeMode_Sliced.mzML");
            string databasePath = Path.Combine(TestContext.CurrentContext.TestDirectory, @"Transcriptomics\TestData", "6mer.fasta");
            string outputFolder = Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestRnaSearchTask");

            CommonParameters commonParams = new
            (
                dissociationType: DissociationType.CID,
                deconvolutionMaxAssumedChargeState: -20,
                deconvolutionIntensityRatio: 3,
                deconvolutionMassTolerance: new PpmTolerance(20),
                precursorMassTolerance: new PpmTolerance(10),
                productMassTolerance: new PpmTolerance(20),
                scoreCutoff: 5,
                totalPartitions: 1,
                maxThreadsToUsePerFile: 1,
                doPrecursorDeconvolution: true,
                useProvidedPrecursorInfo: false,
                digestionParams: new RnaDigestionParams(),
                listOfModsVariable: new List<(string, string)>(),
                listOfModsFixed: new List<(string, string)>()
            );
            RnaSearchParameters searchParams = new()
            {
                DisposeOfFileWhenDone = true,
                MassDiffAcceptorType = MassDiffAcceptorType.Custom,
                CustomMdac = "Custom interval [-5,5]",
                DecoyType = DecoyType.Reverse
            };

            var searchTask = new RnaSearchTask
            {
                CommonParameters = commonParams,
                SearchParameters = searchParams
            };
            var dbForTask = new List<DbForTask> { new(databasePath, false) };
            var taskList = new List<(string, MetaMorpheusTask)> { ("Task1-RnaSearch", searchTask) };
            var runner = new EverythingRunnerEngine(taskList, new List<string> { dataFile }, dbForTask, outputFolder);
            runner.Run();


            var osmFile = Directory.GetFiles(outputFolder, "*.osmtsv", SearchOption.AllDirectories).First();

            var allOsms = SpectrumMatchTsvReader.ReadTsv(osmFile, out List<string> warnings);
            Assert.That(warnings.Count == 0);
            Assert.That(allOsms.Count == 1);
            Assert.That(allOsms.First().BaseSeq, Is.EqualTo("GUACUG"));
        }
    }
}

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EngineLayer;
using IO.MzML;
using MassSpectrometry;
using MzLibSpectralAveraging;
using NUnit.Framework;
using TaskLayer;

namespace Test
{
    [ExcludeFromCodeCoverage]
    public static class AveragingTests
    {
        private static string TestFolder;
        private static CommonParameters commonParameters;

        [OneTimeSetUp]
        public static void OneTimeSetUp()
        {
            TestFolder = Path.Combine(TestContext.CurrentContext.TestDirectory, @"AveragingTest");
            Directory.CreateDirectory(TestFolder);

            commonParameters = new CommonParameters(
                taskDescriptor: "AveragingTask",
                dissociationType: DissociationType.LowCID,
                maxThreadsToUsePerFile: 2);
        }

        [OneTimeTearDown]
        public static void OneTimeTearDown()
        {
            Directory.Delete(TestFolder, true);
        }

        [Test]
        public static void TestAveragingAllScans()
        {
            // load in everything necessary
            string spectraFile = Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestData\sliced_b6.mzML");
            string testPath = Path.Combine(TestFolder, "TestAveragingAll");
            Directory.CreateDirectory(testPath);

            MzLibSpectralAveragingOptions options = new MzLibSpectralAveragingOptions()
            {
                SpectraFileProcessingType = SpectraFileProcessingType.AverageAll,
            };
            SpectralAveragingTask averagingTask = new(options) {CommonParameters = commonParameters};

            // run the averaging task
            averagingTask.RunTask(testPath, new List<DbForTask>(), 
                new List<string>() { spectraFile }, "Task1-AveragingTask");

            // check if all outputs exist
            Assert.That(File.Exists(Path.Combine(testPath, "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "sliced_b6-averaged.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "sliced_b6-averaged.toml")));
            Assert.That(Directory.Exists(Path.Combine(TestFolder, "Task Settings")));
            Assert.That(File.Exists(Path.Combine(TestFolder, "Task Settings", "Task1-AveragingTaskconfig.toml")));

            // ensure averaged is only one scan
            var averagedScan = Mzml.LoadAllStaticData(Path.Combine(testPath, "sliced_b6-averaged.mzML")).GetAllScansList();
            Assert.That(averagedScan.Count, Is.EqualTo(1));

            Directory.Delete(testPath, true);
            Directory.Delete(Path.Combine(TestFolder, "Task Settings"), true);
        }

        [Test]
        public static void TestAveragingEveryNScans()
        {
            // load in everything necessary
            string spectraFile = Path.Combine(TestContext.CurrentContext.TestDirectory,
                @"TestData\SmallCalibratible_Yeast.mzML");
            string testPath = Path.Combine(TestFolder, "TestAveragingEveryNScans");
            Directory.CreateDirectory(testPath);

            MzLibSpectralAveragingOptions options = new MzLibSpectralAveragingOptions()
            {
                SpectraFileProcessingType = SpectraFileProcessingType.AverageEverynScans,
                NumberOfScansToAverage = 5,
            };
            SpectralAveragingTask averagingTask = new(options) { CommonParameters = commonParameters };

            // run the averaging task
            averagingTask.RunTask(testPath, new List<DbForTask>(),
                new List<string>() { spectraFile }, "Task1-AveragingTask");

            // check if all outputs exist
            Assert.That(File.Exists(Path.Combine(testPath, "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.toml")));
            Assert.That(Directory.Exists(Path.Combine(TestFolder, "Task Settings")));
            Assert.That(File.Exists(Path.Combine(TestFolder, "Task Settings", "Task1-AveragingTaskconfig.toml")));

            // ensure averaged every 5 scans
            var originalScans = Mzml.LoadAllStaticData(spectraFile).GetAllScansList();
            var averagedScans = Mzml.LoadAllStaticData(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.mzML")).GetAllScansList();
            Assert.That(originalScans.Count / 5 == averagedScans.Count);

            Directory.Delete(testPath, true);
            Directory.Delete(Path.Combine(TestFolder, "Task Settings"), true);
        }

        [Test]
        public static void TestAveragingDDAScans()
        {
            // load in everything necessary
            string spectraFile = Path.Combine(TestContext.CurrentContext.TestDirectory,
                @"TestData\SmallCalibratible_Yeast.mzML");
            string testPath = Path.Combine(TestFolder, "TestAveragingDDAScans");
            Directory.CreateDirectory(testPath);

            MzLibSpectralAveragingOptions options = new MzLibSpectralAveragingOptions()
            {
                SpectraFileProcessingType = SpectraFileProcessingType.AverageDDAScans,
                NumberOfScansToAverage = 5,
            };
            SpectralAveragingTask averagingTask = new(options) { CommonParameters = commonParameters };

            // run the averaging task
            averagingTask.RunTask(testPath, new List<DbForTask>(),
                new List<string>() { spectraFile }, "Task1-AveragingTask");

            // check if all outputs exist
            Assert.That(File.Exists(Path.Combine(testPath, "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.toml")));
            Assert.That(Directory.Exists(Path.Combine(TestFolder, "Task Settings")));
            Assert.That(File.Exists(Path.Combine(TestFolder, "Task Settings", "Task1-AveragingTaskconfig.toml")));

            // ensure averaged properly
            var originalFiles = Mzml.LoadAllStaticData(spectraFile);
            var averagedFiles = Mzml.LoadAllStaticData(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.mzML"));
            var originalMs1Scans = originalFiles.GetMS1Scans().ToList();
            var averagedMs1Scans = averagedFiles.GetMS1Scans().ToList();
            var originalMs2Scans = originalFiles.GetAllScansList().Where(p => p.MsnOrder == 2).ToList();
            var averagedMs2Scans = averagedFiles.GetAllScansList().Where(p => p.MsnOrder == 2).ToList();

            Assert.That(originalMs1Scans.Count / 5 == averagedMs1Scans.Count);
            for (var i = 0; i < averagedMs2Scans.Count; i++)
            {
                Assert.That(originalMs2Scans[i].MassSpectrum.Equals(averagedMs2Scans[i].MassSpectrum));
            }

            Directory.Delete(testPath, true);
            Directory.Delete(Path.Combine(TestFolder, "Task Settings"), true);
        }

        [Test]
        public static void TestAveragingWithOtherTasks()
        {
            // load in everything necessary
            string spectraFile = Path.Combine(TestContext.CurrentContext.TestDirectory,
                @"TestData\SmallCalibratible_Yeast.mzML");
            string testPath = Path.Combine(TestFolder, "TestAveragingWithOtherTasks");
            string myDatabase = Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestData\smalldb.fasta");
            Directory.CreateDirectory(testPath);

            MzLibSpectralAveragingOptions options = new MzLibSpectralAveragingOptions()
            {
                SpectraFileProcessingType = SpectraFileProcessingType.AverageDDAScans,
                NumberOfScansToAverage = 5,
            };
            SpectralAveragingTask averagingTask = new(options) { CommonParameters = commonParameters };
            CalibrationTask calibrationTask = new CalibrationTask();
            SearchTask searchTask = new SearchTask();

            // run the tasks
            EverythingRunnerEngine everythingRunnerEngine = new EverythingRunnerEngine(
                new List<(string, MetaMorpheusTask)>
                {
                    ("Task1-Calib", calibrationTask), ("Task2-Average", averagingTask), ("Task3-Search", searchTask)
                }, 
                new List<string> { spectraFile }, 
                new List<DbForTask> { new DbForTask(myDatabase, false) }, testPath);
            everythingRunnerEngine.Run();

            // make sure everything is there
            Assert.That(File.Exists(Path.Combine(testPath, "allResults.txt")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task Settings")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task Settings", "Task1-Calibconfig.toml")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task Settings", "Task2-Averageconfig.toml")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task Settings", "Task3-Searchconfig.toml")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task1-Calib")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Calib", "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Calib", "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Calib", "SmallCalibratible_Yeast-calib.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Calib", "SmallCalibratible_Yeast-calib.toml")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task2-Average")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Average", "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Average", "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Average", "SmallCalibratible_Yeast-calib-averaged.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Average", "SmallCalibratible_Yeast-calib-averaged.toml")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task3-Search")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllPeptides.psmtsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllPSMs.psmtsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllPSMs_FormattedForPercolator.tab")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllQuantifiedPeaks.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllQuantifiedPeptides.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllQuantifiedProteinGroups.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "SmallCalibratible_Yeast-calib-averaged.mzID")));

            // ensure averaged properly
            var calibratedFiles = Mzml.LoadAllStaticData(Path.Combine(testPath, "Task1-Calib", "SmallCalibratible_Yeast-calib.mzML"));
            var averagedFiles = Mzml.LoadAllStaticData(Path.Combine(testPath, "Task2-Average", "SmallCalibratible_Yeast-calib-averaged.mzML"));
            var calibratedMs1Scans = calibratedFiles.GetMS1Scans().ToList();
            var averagedMs1Scans = averagedFiles.GetMS1Scans().ToList();
            var calibratedMs2Scans = calibratedFiles.GetAllScansList().Where(p => p.MsnOrder == 2).ToList();
            var averagedMs2Scans = averagedFiles.GetAllScansList().Where(p => p.MsnOrder == 2).ToList();

            Assert.That(calibratedMs1Scans.Count / 5 == averagedMs1Scans.Count);
            for (var i = 0; i < averagedMs2Scans.Count; i++)
            {
                Assert.That(calibratedMs2Scans[i].MassSpectrum.Equals(averagedMs2Scans[i].MassSpectrum));
            }

            Directory.Delete(testPath, true);
        }
    }
}

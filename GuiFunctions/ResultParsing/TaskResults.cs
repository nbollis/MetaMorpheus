using System.IO;
using System.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TaskLayer;
using IO.MzML;
using MassSpectrometry;
using MzLibSpectralAveraging;

namespace GuiFunctions
{
    public class TaskResults
    {

        protected string resultsFilePath;
        protected string autoGeneratedManuscriptProsePath;
        protected string taskTomlPath;
        protected string[] inputSpectraPaths;
        protected string resultsText;
        protected string[] autoGeneratedManuscriptProse;
        protected Dictionary<string, List<MsDataScan>> inputSpectra;

        public string ResultsText => resultsText ??= File.ReadAllText(resultsFilePath);
        public string[] ManuscriptProse =>
            autoGeneratedManuscriptProse ??= File.ReadAllLines(autoGeneratedManuscriptProsePath);
        public MyTask TaskType { get; }

        public Dictionary<string, List<MsDataScan>> InputSpectra
        {
            get
            {
                if (!inputSpectra.Any())
                {
                    foreach (var path in inputSpectraPaths)
                    {
                        var fileName = Path.GetFileName(path);
                        var scans = SpectraFileHandler.LoadAllScansFromFile(path);
                        inputSpectra.Add(fileName, scans);
                    }
                }
                return inputSpectra;
            }
        }



    public TaskResults(string taskDirectory, MyTask tasktype)
        {
            TaskType = tasktype;
            var files = Directory.GetFiles(taskDirectory);
            resultsFilePath = files.First(p => p.Contains("results.txt"));
            autoGeneratedManuscriptProsePath = files.First(p => p.Contains("AutoGenerated"));
            var taskTypeString = taskDirectory.Split("\\").Last().Split("-").Last();
            var settingsDirectory = Directory.GetParent(taskDirectory)?.GetDirectories().First(p => p.Name.Contains("Task Settings"));
            taskTomlPath = settingsDirectory.GetFiles().First(p => p.Name.Contains(taskTypeString)).FullName;

            var startIndex = Array.IndexOf(ManuscriptProse, "Spectra files: ") + 1;
            var endIndex = Array.IndexOf(ManuscriptProse, "Databases:");

            inputSpectraPaths = new string[endIndex - startIndex];
            for (int i = startIndex; i < endIndex; i++)
            {
                inputSpectraPaths[i - startIndex] = ManuscriptProse[i].Trim();
            }

            inputSpectra = new();
        }
    }
}

using System.IO;
using System.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TaskLayer;
using IO.MzML;
using MassSpectrometry;
using SpectralAveraging;
using Readers;

namespace GuiFunctions
{
    public class TaskResults
    {
        protected static string[] ambiguityLevels = new string[] { "1", "2A", "2B", "2C", "2D", "3", "4", "5" };

        public string Name;
        protected string resultsFilePath;
        protected string autoGeneratedManuscriptProsePath;
        protected string taskTomlPath;
        protected string[] taskToml;
        protected string[] inputSpectraPaths;
        protected string[] resultsText;
        protected string[] autoGeneratedManuscriptProse;
        private TimeSpan? _runTime;
        protected Dictionary<string, MsDataFile> inputSpectra;
        protected List<EngineResultsFromTxt> engineResults;
        

        public string[] TaskToml => taskToml ??= File.ReadAllLines(taskTomlPath);
        public string[] ResultsText => resultsText ??= File.ReadAllLines(resultsFilePath);
        public string[] ManuscriptProse =>
            autoGeneratedManuscriptProse ??= File.ReadAllLines(autoGeneratedManuscriptProsePath);
        public MyTask TaskType { get; }

        public Dictionary<string, MsDataFile> InputSpectra
        {
            get
            {
                if (!inputSpectra.Any())
                {
                    foreach (var path in inputSpectraPaths)
                    {
                        var fileName = Path.GetFileName(path);
                        var scans = MsDataFileReader.GetDataFile(path);
                        inputSpectra.Add(fileName, scans);
                    }
                }
                return inputSpectra;
            }
        }

        public List<EngineResultsFromTxt> EngineResults => engineResults ??= ParseEngineTimes(ResultsText).ToList();
        public TimeSpan RunTime => _runTime ??= ParseRunTime(ResultsText);

        public TaskResults(string taskDirectory, MyTask tasktype, string name)
        {
            TaskType = tasktype;
            var files = Directory.GetFiles(taskDirectory);
            resultsFilePath = files.First(p => p.Contains("results.txt"));
            autoGeneratedManuscriptProsePath = files.First(p => p.Contains("AutoGenerated"));
            var taskTypeString = taskDirectory.Split("\\").Last().Split("-").Last();
            var settingsDirectory = Directory.GetParent(taskDirectory)?.GetDirectories().First(p => p.Name.Contains("Task Settings"));
            taskTomlPath = settingsDirectory.GetFiles().First(p => p.Name.Contains(taskTypeString)).FullName;

            var startIndex = Array.IndexOf(ManuscriptProse, "Spectra files: ") + 1;
            var endIndex = Array.IndexOf(ManuscriptProse, "Databases:");

            inputSpectraPaths = new string[endIndex - startIndex];
            for (int i = startIndex; i < endIndex; i++)
            {
                inputSpectraPaths[i - startIndex] = ManuscriptProse[i].Trim();
            }

            inputSpectra = new();
            this.Name = name;
        }

        protected IEnumerable<EngineResultsFromTxt> ParseEngineTimes(string[] resultsFileText)
        {
            for (var i = 0; i < resultsFileText.Length; i++)
            {
                var line = resultsFileText[i];
                if (line.Contains("Time to run engine:"))
                {
                    var timeString = line.Split("engine:")[1].Trim();
                    var typeString = resultsFileText[i - 1].Split(':')[1].Trim();

                    var time = TimeSpan.Parse(timeString);
                    var type = Enum.Parse<EngineType>(typeString);

                    yield return new EngineResultsFromTxt(type, time);
                }
            }
        }

        protected TimeSpan ParseRunTime(string[] resultsFileText)
        {
            var timeLine = resultsFileText.First(p => p.Contains("Time to run task:"));
            var timeString = timeLine.Split("task:")[1].Trim();
            return TimeSpan.Parse(timeString);
        }
    }
}

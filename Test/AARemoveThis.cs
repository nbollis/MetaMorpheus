using Easy.Common.Extensions;
using EngineLayer;
using IO.MzML;
using IO.ThermoRawFileReader;
using MassSpectrometry;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Test
{
    public static  class AARemoveThis
    {
        [Test]
        public static void GetScansfromPrecursor1()
        {
            string directoryPath = @"D:\Projects\Top Down MetaMorpheus\ChimeraValidation\CaMyoUbiqCytCHgh";
            string[] searchFolders = Directory.GetDirectories(directoryPath);
            var foldersFor28 = searchFolders.Where(p => p.Contains("Sample28") && !p.Contains("Open")).ToList();

            List<PsmFromTsv> selectedPsms= new List<PsmFromTsv>();
            List<PSMInfo> psminfo = new();
            foreach (var folder in foldersFor28)
            {
                var searchFolder = Directory.GetDirectories(folder).First(p => p.Contains("Search"));
                var psmFile = Directory.GetFiles(searchFolder).First(p => p.Contains("AllPSMs"));
                var fileSpecificPSMs = PsmTsvReader.ReadTsv(psmFile, out List<string> warnings);
                var psmsFromFirstScan = fileSpecificPSMs.Where(p => p.PrecursorScanNum == 1);

                var manuscripProse = Directory.GetFiles(searchFolder).First(p => p.Contains("AutoGeneratedMan"));
                var manuscriptProse = File.ReadAllLines(manuscripProse);
                var startIndex = Array.IndexOf(manuscriptProse,"Spectra files: ") + 1;
                var endIndex = Array.IndexOf(manuscriptProse, "Databases:");

                Dictionary<string, MsDataFile> dataFiles = new();
                for (int i = startIndex; i < endIndex; i++)
                {
                    var filePath = manuscriptProse[i].Trim();
                    dataFiles.Add(Path.GetFileNameWithoutExtension(filePath), Mzml.LoadAllStaticData(filePath));
                }

                foreach (var psm in psmsFromFirstScan)
                {
                    MsDataScan childScan = dataFiles[psm.FileNameWithoutExtension].GetAllScansList().First(p => p.OneBasedScanNumber == psm.Ms2ScanNumber);
                    PSMInfo info = new(psm.FileNameWithoutExtension, folder.Split('\\').Last(), psm.ProteinName, childScan.OneBasedScanNumber, psm.PrecursorCharge, psm.PrecursorMz, (double)childScan.IsolationMz, 
                        psm.Score, (double)childScan.IsolationWidth, psm.PrecursorMass, psm.QValue, psm.PEP);

                    psminfo.Add(info);
                }
            }

            PSMInfo.OutputAsTsv(directoryPath, "Sample28_Modern_FirstMs1PsmIds", psminfo);
        }
    }

    public class PSMInfo
    {
        public static string Header => "FileName\tSearch Name\tProtein\tScan Number\tPrecursor Charge\tPrecursor Mz\tScan Precursor Mz\tScore\tScan IW\tPrecursor Mass\tQ-Value\tPEP";
        public string SearchName { get; set; }
        public string FileName { get; set; }
        public string ProteinName { get; set; }
        public double ScanNumber { get; set; }
        public double PrecursorCharge { get; set; }
        public double PrecursorMz { get; set; }
        public double ScanPrecursorMz { get; set; }
        public double Score { get; set; }
        public double ScanIW { get; set; }
        public double PrecursorMass { get; set; }
        public double QValue { get; set; }
        public double PEP { get; set; }

        public PSMInfo(string name, string search, string protein, double scanNum, double preCharge, double preMz, double scanPre, double sco, double iw, double preMass, double qval, double pep)
        {
            FileName = name;
            SearchName = search;
            ProteinName = protein;
            ScanNumber= scanNum;
            PrecursorCharge = preCharge;
            PrecursorMz = preMz;
            ScanPrecursorMz= scanPre;
            Score = sco;
            ScanIW = iw;
            PrecursorMass = preMass;
            QValue = qval;
            PEP = pep;
        }

        public override string ToString()
        {
            string delim = "\t";
            string val = FileName + delim + SearchName + delim + ProteinName + delim + ScanNumber + delim + PrecursorCharge+ delim + PrecursorMz + delim + 
                ScanPrecursorMz + delim + Score + delim + ScanIW + delim + PrecursorMass + delim + QValue+ delim + PEP;
            return val;
        }

        public static void OutputAsTsv(string directoryPath, string fileName, IEnumerable<PSMInfo> list)
        {
            string outpath = Path.Combine(directoryPath, fileName + ".psmtsv");
            using (StreamWriter writer = File.CreateText(outpath))
            {
                writer.WriteLine(Header);
                foreach (var item in list)
                {
                    writer.WriteLine(item.ToString());
                }
            }
        }


    }
}

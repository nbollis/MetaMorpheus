using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using EngineLayer;
using FlashLFQ;
using GuiFunctions;
using IO.MzML;
using MassSpectrometry;
using SpectralAveraging;
using NUnit.Framework;
using SpectralAveraging;
using TaskLayer;

namespace Test
{
    [ExcludeFromCodeCoverage]
    public static class AveragingTests
    {
        private static string TestFolder;
        private static CommonParameters commonParameters;

        [OneTimeSetUp]
        public static void OneTimeSetUp()
        {
            TestFolder = Path.Combine(TestContext.CurrentContext.TestDirectory, @"AveragingTest");
            Directory.CreateDirectory(TestFolder);

            commonParameters = new CommonParameters(
                taskDescriptor: "AveragingTask",
                dissociationType: DissociationType.LowCID,
                maxThreadsToUsePerFile: 2);
        }

        [OneTimeTearDown]
        public static void OneTimeTearDown()
        {
            Directory.Delete(TestFolder, true);
        }

        [Test]
        public static void TestAveragingAllScans()
        {
            // load in everything necessary
            string spectraFile = Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestData\sliced_b6.mzML");
            string testPath = Path.Combine(TestFolder, "TestAveragingAll");
            Directory.CreateDirectory(testPath);

            SpectralAveragingParameters options = new SpectralAveragingParameters()
            {
                SpectraFileAveragingType = SpectraFileAveragingType.AverageAll,
            };
            SpectralAveragingTask averagingTask = new(options) {CommonParameters = commonParameters};

            // run the averaging task
            var results = averagingTask.RunTask(testPath, new List<DbForTask>(), 
                new List<string>() { spectraFile }, "Task1-AveragingTask");

            // check results object
            Assert.That(results.NewSpectra.Count == 1);
            Assert.That(results.NewSpectra.Contains(Path.Combine(testPath, "sliced_b6-averaged.mzML")));
            Assert.That(results.NewDatabases == null);

            // check if all outputs exist
            Assert.That(File.Exists(Path.Combine(testPath, "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "sliced_b6-averaged.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "sliced_b6-averaged.toml")));
            Assert.That(Directory.Exists(Path.Combine(TestFolder, "Task Settings")));
            Assert.That(File.Exists(Path.Combine(TestFolder, "Task Settings", "Task1-AveragingTaskconfig.toml")));

            // ensure averaged is only one scan
            var averagedScan = Mzml.LoadAllStaticData(Path.Combine(testPath, "sliced_b6-averaged.mzML")).GetAllScansList();
            Assert.That(averagedScan.Count, Is.EqualTo(1));

            Directory.Delete(testPath, true);
            Directory.Delete(Path.Combine(TestFolder, "Task Settings"), true);
        }

        [Test]
        public static void TestAveragingEveryNScans()
        {
            // load in everything necessary
            string spectraFile = Path.Combine(TestContext.CurrentContext.TestDirectory,
                @"TestData\SmallCalibratible_Yeast.mzML");
            string testPath = Path.Combine(TestFolder, "TestAveragingEveryNScans");
            Directory.CreateDirectory(testPath);

            SpectralAveragingParameters options = new SpectralAveragingParameters()
            {
                SpectraFileAveragingType = SpectraFileAveragingType.AverageEverynScans,
                NumberOfScansToAverage = 5,
            };
            SpectralAveragingTask averagingTask = new(options) { CommonParameters = commonParameters };

            // run the averaging task
            var results = averagingTask.RunTask(testPath, new List<DbForTask>(),
                new List<string>() { spectraFile }, "Task1-AveragingTask");

            // check results object
            Assert.That(results.NewSpectra.Count == 1);
            Assert.That(results.NewSpectra.Contains(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.mzML")));
            Assert.That(results.NewDatabases == null);

            // check if all outputs exist
            Assert.That(File.Exists(Path.Combine(testPath, "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.toml")));
            Assert.That(Directory.Exists(Path.Combine(TestFolder, "Task Settings")));
            Assert.That(File.Exists(Path.Combine(TestFolder, "Task Settings", "Task1-AveragingTaskconfig.toml")));

            // ensure averaged every 5 scans
            var originalScans = Mzml.LoadAllStaticData(spectraFile).GetAllScansList();
            var averagedScans = Mzml.LoadAllStaticData(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.mzML")).GetAllScansList();
            Assert.That(originalScans.Count / 5 == averagedScans.Count);

            Directory.Delete(testPath, true);
            Directory.Delete(Path.Combine(TestFolder, "Task Settings"), true);
        }

        [Test]
        public static void TestAveragingDDAScans()
        {
            // load in everything necessary
            string spectraFile = Path.Combine(TestContext.CurrentContext.TestDirectory,
                @"TestData\SmallCalibratible_Yeast.mzML");
            string testPath = Path.Combine(TestFolder, "TestAveragingDDAScans");
            Directory.CreateDirectory(testPath);

            SpectralAveragingParameters options = new SpectralAveragingParameters()
            {
                SpectraFileAveragingType = SpectraFileAveragingType.AverageDdaScans,
                NumberOfScansToAverage = 5,
            };
            SpectralAveragingTask averagingTask = new(options) { CommonParameters = commonParameters };

            // run the averaging task
            var results = averagingTask.RunTask(testPath, new List<DbForTask>(),
                new List<string>() { spectraFile }, "Task1-AveragingTask");

            // check results object
            Assert.That(results.NewSpectra.Count == 1);
            Assert.That(results.NewSpectra.Contains(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.mzML")));
            Assert.That(results.NewDatabases == null);

            // check if all outputs exist
            Assert.That(File.Exists(Path.Combine(testPath, "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.toml")));
            Assert.That(Directory.Exists(Path.Combine(TestFolder, "Task Settings")));
            Assert.That(File.Exists(Path.Combine(TestFolder, "Task Settings", "Task1-AveragingTaskconfig.toml")));

            // ensure averaged properly
            var originalFiles = Mzml.LoadAllStaticData(spectraFile);
            var averagedFiles = Mzml.LoadAllStaticData(Path.Combine(testPath, "SmallCalibratible_Yeast-averaged.mzML"));
            var originalMs1Scans = originalFiles.GetMS1Scans().ToList();
            var averagedMs1Scans = averagedFiles.GetMS1Scans().ToList();
            var originalMs2Scans = originalFiles.GetAllScansList().Where(p => p.MsnOrder == 2).ToList();
            var averagedMs2Scans = averagedFiles.GetAllScansList().Where(p => p.MsnOrder == 2).ToList();

            Assert.That(originalMs1Scans.Count / 5 == averagedMs1Scans.Count);
            for (var i = 0; i < averagedMs2Scans.Count; i++)
            {
                Assert.That(originalMs2Scans[i].MassSpectrum.Equals(averagedMs2Scans[i].MassSpectrum));
            }

            Directory.Delete(testPath, true);
            Directory.Delete(Path.Combine(TestFolder, "Task Settings"), true);
        }

        [Test]
        public static void TestExperimentalDesignFunctionsProperly()
        {
            // load in everything necessary
            string spectraFile = Path.Combine(TestContext.CurrentContext.TestDirectory,
                @"TestData\SmallCalibratible_Yeast.mzML");
            string testPath = Path.Combine(TestFolder, "TestAveragingExperimentalDesign");
            Directory.CreateDirectory(testPath);
            string myDatabase = Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestData\smalldb.fasta");
            SpectralAveragingParameters options = new SpectralAveragingParameters()
            {
                SpectraFileAveragingType = SpectraFileAveragingType.AverageDdaScans,
                NumberOfScansToAverage = 5,
            };
            SpectralAveragingTask averagingTask = new(options) { CommonParameters = commonParameters };
            SearchTask searchTask = new SearchTask();

            // run the tasks
            EverythingRunnerEngine everythingRunnerEngine = new EverythingRunnerEngine(
                new List<(string, MetaMorpheusTask)> { ("Task1-Average", averagingTask), ("Task2-Search", searchTask) },
                new List<string> { spectraFile },
                new List<DbForTask> { new DbForTask(myDatabase, false) },
                testPath);

            // set up original experimental design (input to calibration)
            SpectraFileInfo fileInfo = new SpectraFileInfo(spectraFile, "condition", 0, 0, 0);
            var experimentalDesignFilePath = ExperimentalDesign.WriteExperimentalDesignToFile(new List<SpectraFileInfo> { fileInfo });

            everythingRunnerEngine.Run();

            // make sure everything is there
            Assert.That(File.Exists(Path.Combine(testPath, "allResults.txt")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task Settings")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task Settings", "Task1-Averageconfig.toml")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task Settings", "Task2-Searchconfig.toml")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task1-Average")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Average", "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Average", "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Average", "SmallCalibratible_Yeast-averaged.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Average", "SmallCalibratible_Yeast-averaged.toml")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Average", "ExperimentalDesign.tsv")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task2-Search")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllPeptides.psmtsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllPSMs.psmtsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllPSMs_FormattedForPercolator.tab")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllQuantifiedPeaks.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllQuantifiedPeptides.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllQuantifiedProteinGroups.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "SmallCalibratible_Yeast-averaged.mzID")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "ExperimentalDesign.tsv")));

            Directory.Delete(testPath, true);
        }

        [Test]
        public static void TestExperimentalDesignError()
        {
            // load in everything necessary
            string spectraFile = Path.Combine(TestContext.CurrentContext.TestDirectory,
                @"TestData\SmallCalibratible_Yeast.mzML");
            string testPath = Path.Combine(TestFolder, "TestAveragingExperimentalDesignErrors");
            Directory.CreateDirectory(testPath);
            string myDatabase = Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestData\smalldb.fasta");
            SpectralAveragingParameters options = new SpectralAveragingParameters()
            {
                SpectraFileAveragingType = SpectraFileAveragingType.AverageDdaScans,
                NumberOfScansToAverage = 5,
            };
            SpectralAveragingTask averagingTask = new(options) { CommonParameters = commonParameters };
            SearchTask searchTask = new SearchTask();

            // run the tasks
            EverythingRunnerEngine everythingRunnerEngine = new EverythingRunnerEngine(
                new List<(string, MetaMorpheusTask)> { ("Task1-Average", averagingTask), ("Task2-Search", searchTask) },
                new List<string> { spectraFile },
                new List<DbForTask> { new DbForTask(myDatabase, false) },
                testPath);

            // set up original experimental design (input to calibration)
            SpectraFileInfo fileInfo = new SpectraFileInfo(spectraFile, "condition", 0, 0, 0);
            var experimentalDesignFilePath = ExperimentalDesign.WriteExperimentalDesignToFile(new List<SpectraFileInfo> { fileInfo });

            using (StreamWriter writer = new StreamWriter(File.OpenWrite(experimentalDesignFilePath)))
            {
                writer.WriteLine("\t2\t4\t7");
            }

            everythingRunnerEngine.Run();

            // make sure everything is there
            Assert.That(File.Exists(Path.Combine(testPath, "allResults.txt")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task Settings")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task Settings", "Task1-Averageconfig.toml")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task Settings", "Task2-Searchconfig.toml")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task1-Average")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Average", "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Average", "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Average", "SmallCalibratible_Yeast-averaged.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Average", "SmallCalibratible_Yeast-averaged.toml")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task2-Search")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllPeptides.psmtsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllPSMs.psmtsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllPSMs_FormattedForPercolator.tab")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllQuantifiedPeaks.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllQuantifiedPeptides.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "AllQuantifiedProteinGroups.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Search", "SmallCalibratible_Yeast-averaged.mzID")));

            Directory.Delete(testPath, true);
        }

        [Test]
        public static void TestAveragingWithOtherTasks()
        {
            // load in everything necessary
            string spectraFile = Path.Combine(TestContext.CurrentContext.TestDirectory,
                @"TestData\SmallCalibratible_Yeast.mzML");
            string testPath = Path.Combine(TestFolder, "TestAveragingWithOtherTasks");
            string myDatabase = Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestData\smalldb.fasta");
            Directory.CreateDirectory(testPath);

            SpectralAveragingParameters options = new SpectralAveragingParameters()
            {
                SpectraFileAveragingType = SpectraFileAveragingType.AverageDdaScans,
                NumberOfScansToAverage = 5,
            };
            SpectralAveragingTask averagingTask = new() { CommonParameters = commonParameters };
            averagingTask.GetType().GetProperty("Options")?.SetValue(averagingTask, options);
            CalibrationTask calibrationTask = new CalibrationTask();
            SearchTask searchTask = new SearchTask();

            // run the tasks
            EverythingRunnerEngine everythingRunnerEngine = new EverythingRunnerEngine(
                new List<(string, MetaMorpheusTask)>
                {
                    ("Task1-Calib", calibrationTask), ("Task2-Average", averagingTask), ("Task3-Search", searchTask)
                }, 
                new List<string> { spectraFile }, 
                new List<DbForTask> { new DbForTask(myDatabase, false) }, testPath);
            everythingRunnerEngine.Run();

            // make sure everything is there
            Assert.That(File.Exists(Path.Combine(testPath, "allResults.txt")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task Settings")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task Settings", "Task1-Calibconfig.toml")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task Settings", "Task2-Averageconfig.toml")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task Settings", "Task3-Searchconfig.toml")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task1-Calib")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Calib", "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Calib", "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Calib", "SmallCalibratible_Yeast-calib.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task1-Calib", "SmallCalibratible_Yeast-calib.toml")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task2-Average")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Average", "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Average", "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Average", "SmallCalibratible_Yeast-calib-averaged.mzML")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task2-Average", "SmallCalibratible_Yeast-calib-averaged.toml")));

            Assert.That(Directory.Exists(Path.Combine(testPath, "Task3-Search")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AutoGeneratedManuscriptProse.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "results.txt")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllPeptides.psmtsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllPSMs.psmtsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllPSMs_FormattedForPercolator.tab")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllQuantifiedPeaks.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllQuantifiedPeptides.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "AllQuantifiedProteinGroups.tsv")));
            Assert.That(File.Exists(Path.Combine(testPath, "Task3-Search", "SmallCalibratible_Yeast-calib-averaged.mzID")));

            // ensure averaged properly
            var calibratedFiles = Mzml.LoadAllStaticData(Path.Combine(testPath, "Task1-Calib", "SmallCalibratible_Yeast-calib.mzML"));
            var averagedFiles = Mzml.LoadAllStaticData(Path.Combine(testPath, "Task2-Average", "SmallCalibratible_Yeast-calib-averaged.mzML"));
            var calibratedMs1Scans = calibratedFiles.GetMS1Scans().ToList();
            var averagedMs1Scans = averagedFiles.GetMS1Scans().ToList();
            var calibratedMs2Scans = calibratedFiles.GetAllScansList().Where(p => p.MsnOrder == 2).ToList();
            var averagedMs2Scans = averagedFiles.GetAllScansList().Where(p => p.MsnOrder == 2).ToList();

            Assert.That(calibratedMs1Scans.Count / 5 == averagedMs1Scans.Count);
            for (var i = 0; i < averagedMs2Scans.Count; i++)
            {
                Assert.That(calibratedMs2Scans[i].MassSpectrum.Equals(averagedMs2Scans[i].MassSpectrum));
            }

            Directory.Delete(testPath, true);
        }

        //[Test]
        //public static void TestMzLibSpecAveragingOptionsConstructor()
        //{
        //    SpectralAveragingParameters specOptions = new SpectralAveragingParameters()
        //        { Percentile = 2, MinSigmaValue = 1.3, MaxSigmaValue = 3 };
        //    SpectralAveragingParameters options = new SpectralAveragingParameters(specOptions);
        //    SpectralAveragingParametersViewModel parametersVm = new(options);
        //    Assert.That(parametersVm.RejectionType == OutlierRejectionType.NoRejection);
        //    Assert.That(parametersVm.WeightingType == SpectraWeightingType.WeightEvenly);
        //    Assert.That(parametersVm.SpectraFileProcessingType == SpectraFileAveragingType.AverageAll);
        //    Assert.That(parametersVm.NormalizationType == true);
        //    Assert.That(parametersVm.ScanOverlap == 2);
        //    Assert.That(parametersVm.NumberOfScansToAverage == 5);
        //    Assert.That(Math.Abs(parametersVm.BinSize - 0.01) < 0.0001);
        //    Assert.That(Math.Abs(parametersVm.MinSigmaVale - 1.3) < 0.0001);
        //    Assert.That(Math.Abs(parametersVm.MaxSigmaValue - 3) < 0.0001);
        //    Assert.That(Math.Abs(parametersVm.Percentile - 2) < 0.0001);
        //    Assert.That(parametersVm.Name == "Default Options");
        //    Assert.That(parametersVm.SavedPath == null);
        //    Assert.That(parametersVm.OutputTypes.SequenceEqual(Enum.GetValues<OutputType>()));
        //    Assert.That(parametersVm.RejectionTypes.SequenceEqual(Enum.GetValues<RejectionType>().Where(p => p != RejectionType.Thermo).ToArray()));
        //    Assert.That(parametersVm.WeightingTypes.SequenceEqual(Enum.GetValues<WeightingType>()));
        //    Assert.That(parametersVm.SpectraFileProcessingTypes.SequenceEqual(Enum.GetValues<SpectraFileProcessingType>()));
        //}

        //[Test]
        //public static void TestMzLibSpecAveragingOptionsResetDefaults()
        //{
        //    // set all values
        //    SpectralAveragingParameters specOptions = new SpectralAveragingParameters()
        //        { Percentile = 2, MinSigmaValue = 1.3, MaxSigmaValue = 3 };
        //    SpectralAveragingParameters options = new SpectralAveragingParameters(specOptions);
        //    SpectralAveragingParametersViewModel parametersVm = new(options);
        //    parametersVm.SpectralAveragingParameters = new SpectralAveragingParameters(specOptions);
        //    parametersVm.RejectionType = RejectionType.AveragedSigmaClipping;
        //    parametersVm.WeightingType = WeightingType.CauchyDistribution;
        //    parametersVm.SpectraFileProcessingType = SpectraFileProcessingType.AverageDDAScansWithOverlap;
        //    parametersVm.NormalizationType = false;
        //    parametersVm.Percentile = 14;
        //    parametersVm.MinSigmaVale = 20;
        //    parametersVm.MaxSigmaValue = 15;
        //    parametersVm.BinSize = 4;
        //    parametersVm.NumberOfScansToAverage = 20;
        //    parametersVm.OutputType = OutputType.txt;
        //    parametersVm.ScanOverlap = 10;

        //    // ensure they were set
        //    Assert.That(Math.Abs(parametersVm.Percentile - 14) < 0.0001);
        //    Assert.That(parametersVm.RejectionType == RejectionType.AveragedSigmaClipping);
        //    Assert.That(parametersVm.WeightingType == WeightingType.CauchyDistribution);
        //    Assert.That(parametersVm.SpectraFileProcessingType == SpectraFileProcessingType.AverageDDAScansWithOverlap);
        //    Assert.That(parametersVm.NormalizationType == false);
        //    Assert.That(parametersVm.OutputType == OutputType.txt);
        //    Assert.That(parametersVm.ScanOverlap == 10);
        //    Assert.That(parametersVm.NumberOfScansToAverage == 20);
        //    Assert.That(Math.Abs(parametersVm.BinSize - 4) < 0.0001);
        //    Assert.That(Math.Abs(parametersVm.MinSigmaVale - 20) < 0.0001);
        //    Assert.That(Math.Abs(parametersVm.MaxSigmaValue - 15) < 0.0001);
        //    Assert.That(parametersVm.Name == "Default Options");
        //    Assert.That(parametersVm.SavedPath == null);

        //    // reset all values and ensure they were set
        //    parametersVm.ResetDefaults();
        //    Assert.That(Math.Abs(parametersVm.Percentile - 0.1) < 0.0001);
        //    Assert.That(parametersVm.RejectionType == RejectionType.NoRejection);
        //    Assert.That(parametersVm.WeightingType == WeightingType.NoWeight);
        //    Assert.That(parametersVm.SpectraFileProcessingType == SpectraFileProcessingType.AverageAll);
        //    Assert.That(parametersVm.NormalizationType == true);
        //    Assert.That(parametersVm.OutputType == OutputType.mzML);
        //    Assert.That(parametersVm.ScanOverlap == 2);
        //    Assert.That(parametersVm.NumberOfScansToAverage == 5);
        //    Assert.That(Math.Abs(parametersVm.BinSize - 0.01) < 0.0001);
        //    Assert.That(Math.Abs(parametersVm.MinSigmaVale - 1.5) < 0.0001);
        //    Assert.That(Math.Abs(parametersVm.MaxSigmaValue - 1.5) < 0.0001);
        //    Assert.That(parametersVm.Name == "Default Options");
        //    Assert.That(parametersVm.SavedPath == null);
        //    Assert.That(parametersVm.OutputTypes.SequenceEqual(Enum.GetValues<OutputType>()));
        //    Assert.That(parametersVm.RejectionTypes.SequenceEqual(Enum.GetValues<RejectionType>().Where(p => p != RejectionType.Thermo).ToArray()));
        //    Assert.That(parametersVm.WeightingTypes.SequenceEqual(Enum.GetValues<WeightingType>()));
        //    Assert.That(parametersVm.SpectraFileProcessingTypes.SequenceEqual(Enum.GetValues<SpectraFileProcessingType>()));
        //}

        //[Test]
        //public static void TestMzLibSpectralAveragingOptionsSpecialGettersAndSetters()
        //{
        //    SpectralAveragingParameters specOptions = new SpectralAveragingParameters()
        //        { Percentile = 2, MinSigmaValue = 1.3, MaxSigmaValue = 3 };
        //    SpectralAveragingParameters options = new SpectralAveragingParameters(specOptions);
        //    SpectralAveragingParametersViewModel parametersVm = new(options);
        //    parametersVm.SpectraFileProcessingType = SpectraFileProcessingType.AverageEverynScansWithOverlap;
        //    parametersVm.ScanOverlap = 3;

        //    parametersVm.SpectraFileProcessingType = SpectraFileProcessingType.AverageEverynScans;
        //    Assert.That(parametersVm.ScanOverlap == 0);

        //    parametersVm.SpectraFileProcessingType = SpectraFileProcessingType.AverageDDAScansWithOverlap;
        //    Assert.That(parametersVm.ScanOverlap == 3);

        //    parametersVm.SavedPath = Path.Combine(TestFolder, "testingtesting.toml");
        //    Assert.That(parametersVm.SavedPath == Path.Combine(TestFolder, "testingtesting.toml"));
        //    Assert.That(parametersVm.Name == "testingtesting");
        //}
    }
}
